import json
import random
import numpy as np
import os
import re
import shutil
import normalize  
import convert_to_graph  


def get_next_file_number(output_dir):
    existing_files = os.listdir(output_dir)
    numbers = []
    for filename in existing_files:
        match = re.search(r"graph(\d+)\.json", filename)
        if match:
            numbers.append(int(match.group(1)))
    return max(numbers) + 1 if numbers else 1

def generate_graphs(output_dir, template_graph, max_simularity, min_simularity,file_name_iterator, num_graphs=10):

	template_graph = json.loads(template_graph) #transform string into dict

	
	for i in range(num_graphs):
		graph = template_graph.copy()
		similarity = round(random.uniform(min_simularity, max_simularity), 2)  # –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–æ–∂–æ—Å—Ç—ñ
		# –î–æ–¥–∞—î–º–æ —à—É–º —É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ö–æ–∂–æ—Å—Ç—ñ
		# noise_level = (1.0 - similarity) * 0.5 * 100.0  # –ß–∏–º –º–µ–Ω—à–∞ —Å—Ö–æ–∂—ñ—Å—Ç—å, —Ç–∏–º –±—ñ–ª—å—à–µ –∑–º—ñ–Ω
		noise_level = (1.0 - similarity) * 0.5 * 10.0 

		perturbed_coords = [[x + random.uniform(-noise_level, noise_level), 
								y + random.uniform(-noise_level, noise_level)] 
							for x, y in template_graph["coords"]]
		
		# –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ —Ä–µ–±—Ä–∞ –∑ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—é 1 - similarity
		# perturbed_edges = [edge for edge in template_graph["edges"] if random.random() < edge_similarity]

		
		graph["coords"] = perturbed_coords
		graph["edges"] =  template_graph["edges"]
		graph["similarity"] = similarity

		file_number = get_next_file_number(output_dir)

		# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª
		file_path = os.path.join(output_dir, f"graph{file_number}.json")
		with open(file_path, "w") as f:
			json.dump(graph, f, indent=4)
		
		# print(f"Generated {file_path} with similarity {similarity}")


def process_files(template_features,output_dir, max_sim,file_name_iterator, step_lines=2):

	min_sim=0.1
	# to lower max-min / to lower (total/step)
	total_lines = len(template_features)
	max_iterations = total_lines // step_lines

	print('total lines', total_lines)
	step_percent = (max_sim-min_sim)/max_iterations


	for i in range(max_iterations):
		current_min = max_sim - (i + 1) * step_percent
		current_max = current_min + step_percent
		# print('range', current_min, current_max, 'max iterations' , max_iterations)
		if current_min < min_sim:
			break  # –ø—Ä–∏–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –≤–∏–π—à–ª–∏ –∑–∞ –º–µ–∂—ñ –¥–æ–ø—É—Å—Ç–∏–º–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ



		# –ö–æ–ø—ñ—è —Ç–∞ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π
		current_features = template_features[:total_lines - i * step_lines]
		if len(current_features) < 2:
			break  # –Ω–µ –º–æ–∂–Ω–∞ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ –∑ –¥—É–∂–µ –º–∞–ª–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–Ω—ñ–π
		print('range', current_min, current_max, 'current features length' , len(current_features), 'max iterations' , max_iterations)

		# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ–∞
		json_template = convert_to_graph.build_graph(current_features)

		# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–≤ —É –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —Å—Ö–æ–∂–æ—Å—Ç—ñ
		generate_graphs(output_dir, json_template, current_max / 100.0, current_min / 100.0, file_name_iterator)



if __name__ == "__main__":
	# template_path = './assets/example2.svg'
	# template_path = '../../assets/figure.svg' #MAIN
	# template_path = '../../assets/normalizedOutput.svg'
	template_dir = '../../assets/complexFigureTemplates'

	file_name_iterator = 0
	
	output_dir="trainingData/generated"
	# –í–∏–¥–∞–ª—è—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ —ñ—Å–Ω—É—î
	if os.path.exists(output_dir):
		shutil.rmtree(output_dir)

	# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
	os.makedirs(output_dir)
	# user_path = sys.argv[1]

	# –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –≤—Å—ñ SVG-—Ñ–∞–π–ª–∏ –≤ –ø–∞–ø—Ü—ñ
	for filename in os.listdir(template_dir):
		if filename.endswith('.svg'):
			# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
			template_path = os.path.join(template_dir, filename)

			# –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "template_80.svg" ‚Üí 80)
			match = re.search(r'(\d+)', filename)
			if match:
				accuracy_percent = int(match.group(1))
			else:
				print(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ —É –Ω–∞–∑–≤—ñ: {filename}")
				continue

			# –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É
			print(f"üîç –û–±—Ä–æ–±–ª—è—î–º–æ {filename} –∑ accuracy {accuracy_percent}%")
			template_features = normalize.extract_example_lines(template_path)
			process_files(template_features, output_dir, accuracy_percent, file_name_iterator)
	# print('length of the features', len(template_features))
	# total_lines = len(template_features)
	# print('total lines', total_lines)
	# step_lines = 2 #–Ω–∞ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ 4 –ª—ñ–Ω—ñ—ó, –±–æ —Ç–∞–∫ –Ω–∞–π–±—ñ–ª—å—à –ª–æ–≥—ñ—á–Ω–æ –≤–∏–¥–∞–ª—è—é—Ç—å—Å—è —Ñ—ñ–≥—É—Ä–∏ 
	# step_percent = 4.5 # 44/4= 11 , 100%/11 = 9

	# max_sim = 100
	# min_sim = 1

	# # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π, —â–æ–± –Ω–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –±—ñ–ª—å—à–µ –ª—ñ–Ω—ñ–π, –Ω—ñ–∂ —î
	# max_iterations = total_lines // step_lines

	# for i in range(max_iterations):
	# 	current_min = max_sim - (i + 1) * step_percent
	# 	current_max = current_min + step_percent
	# 	# print('range', current_min, current_max, 'max iterations' , max_iterations)
	# 	if current_min < min_sim:
	# 		break  # –ø—Ä–∏–ø–∏–Ω—è—î–º–æ, —è–∫—â–æ –≤–∏–π—à–ª–∏ –∑–∞ –º–µ–∂—ñ –¥–æ–ø—É—Å—Ç–∏–º–æ—ó —Å—Ö–æ–∂–æ—Å—Ç—ñ



	# 	# –ö–æ–ø—ñ—è —Ç–∞ –æ–±—Ä—ñ–∑–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π
	# 	current_features = template_features[:total_lines - i * step_lines]
	# 	if len(current_features) < 2:
	# 		break  # –Ω–µ –º–æ–∂–Ω–∞ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ –∑ –¥—É–∂–µ –º–∞–ª–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ª—ñ–Ω—ñ–π
	# 	print('range', current_min, current_max, 'current features length' , len(current_features), 'max iterations' , max_iterations)

	# 	# –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ–∞
	# 	json_template = convert_to_graph.build_graph(current_features)

	# 	# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–≤ —É –∑–∞–¥–∞–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ —Å—Ö–æ–∂–æ—Å—Ç—ñ
	# 	generate_graphs(output_dir, json_template, current_max / 100.0, current_min / 100.0, i)
